{
  "hash": "b8b28be2fa97a6397e8687187b051c0a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab: regularization\"\nsubtitle: \"Introduction to regularized adjusted plus-minus (RAPM)\"\nformat: html\n---\n\n\n\n\n## Introduction\n\nThe purpose of this lab is to walk through the basics of a **regularized adjusted plus-minus (RAPM) model** to estimate the impact of basketball players when they are on the court, while adjusting for the quality of their teammates and opponents.\nWe will use a dataset that is already in the wide design matrix form with indicator columns for every player that was observed during the regular season.\nYou can find the script for building this dataset [here](https://raw.githubusercontent.com/36-SURE/36-SURE.github.io/main/data/init_nba_rapm_data.R), which relies on the [`hoopR` package](https://hoopr.sportsdataverse.org/) to obtain the data. \n(Ron is a true hero.)\n\nThe following code chunk reads in the data, which is in a wide format.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# library(tidyverse)\n# nba_rapm_data <- read_csv(\"https://github.com/36-SURE/36-SURE.github.io/raw/main/data/nba_2223_season_rapm_data.csv.gz\")\n# nba_rapm_data\n```\n:::\n\n\n\n\nIn this dataset, we have 32,358 unique shifts/stints with 539 players represented by the indicator variables (`1` if on court for home team, `-1` if on court for away team, and `0` if not on court).\nAdditional context is captured by the following variables:\n\n* `game_id`: unique game ID \n* `stint_id`: unique identifier within a game for a stint for particular combination of home and away lineup (in appearance of order, where 1 is the first stint in the game) \n* `n_pos`: number of possessions (combined for both home and away) during the observed stint \n* `home_points`: number of points scored by the home team during the stint \n* `away_points`: number of points scored by the away team during the stint \n* `minutes`: length of the stint in terms of minutes played \n* `margin`: common response for RAPM models, defined as: `(home_points - away_points) / n_pos * 100`\n\n## Adjusted Plus-Minus (APM)\n\nWe'll first consider the classic [Rosenbaum (2004)](https://www.82games.com/comm30.htm) **adjusted plus-minus (APM)** model, which is weighted least-squares where:\n\n*   Response variable is the score differential with respect to home team, i.e., `home_points - away_points`\n\n*   Weights are the number of posessions during the shift/stint, i.e., `n_pos`\n\nLet's go ahead and fit this initial model (this might take a bit to run).\n\nFirst, compute the score differential as `score_diff = home_points - away_points` using `mutate()`. Append this new column to the data `nba_rapm_data`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# INSERT CODE HERE\n```\n:::\n\n\n\n\nNext, create a new dataset named `nba_apm_model_data` that contains only the response `score_diff`, the weights `n_pos`,  and the player columns. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# INSERT CODE HERE\n```\n:::\n\n\n\n\nNow, fit the model using the code below.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# uncomment the code below\n# rosenbaum_model <- lm(score_diff ~ 0 + . - n_pos, \n#                       data = INSERT CODE HERE,\n#                       weights = INSERT CODE HERE)\n# notice an intercept term is not included (that's what the 0 is there for)\n# `+ .` by itself means include everything as predictors\n# `+ . - n_pos` means include everything BUT n_pos \n```\n:::\n\n\n\n\nWe're not going to view the summary of this model since it is a bit of a mess. \nInstead, we'll take advantage of the [`broom` package](https://broom.tidymodels.org/index.html) to view the coefficients:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# library(broom)\n# rosenbaum_coef <- tidy(rosenbaum_model)\n# rosenbaum_coef\n```\n:::\n\n\n\n\nObviously, in this current form we have no idea, we have no idea which player is which. Fortunately for you, there is another dataset with the names of the players to join using these IDs in the `term` column: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# nba_player_table <- read_csv(\"https://raw.githubusercontent.com/36-SURE/36-SURE.github.io/main/data/nba_2223_player_table.csv\")\n# nba_player_table\n```\n:::\n\n\n\n\nYou'll notice that this matches the number of rows as the `rosenbaum_coef` table.\nBut we first need to modify the `term` column by removing the back-tick symbols and then converting the IDs to numeric values before joining:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# rosenbaum_coef <- rosenbaum_coef |>\n#   mutate(term = as.numeric(str_remove_all(term, \"`\"))) |> # convert term to numeric\n#   left_join(nba_player_table, by = c(\"term\" = \"player_id\")) # join to obtain player names\n```\n:::\n\n\n\n\nWho are the top players based on this approach? Display the top 10 (in terms of `estimate` in the `rosenbaum_coef` data).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# INSERT CODE HERE\n```\n:::\n\n\n\n\nAnd the worst players? Display the bottom 10.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# INSERT CODE HERE\n```\n:::\n\n\n\n\nThese look like pretty extreme values, with the most extreme values observed by players that have limited playing time (upon searching their stats online).\n\n\nBefore we think about how to address these issues, let's look at what happens if we make a slight tweak to our model by using the `margin` variable as the response instead.\n\nRepeat what we've done so far, but use `margin` in the original data `nba_rapm_data` as the response instead of `score_diff`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# INSERT CODE HERE\n```\n:::\n\n\n\n\nDo we see player names that make sense? What do you notice about the magnitude for the coefficient estimates compared to the score differential model?\n\nLet's quickly take a look at the distribution of the coefficients for the players. Display a histogram of `estimate` (for the new model with `margin` as the response). What do you notice about this distribution?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# INSERT CODE HERE\n```\n:::\n\n\n\n\n## Regularized Adjusted Plus-Minus (RAPM)\n\n### Ridge RAPM\n\nIn order to address the common issues facing APM models, we can fit a RAPM model using ridge regression.\nThe go-to approach for fitting ridge (as well as lasso and elastic-net models) is with the [`glmnet` package](https://glmnet.stanford.edu/articles/glmnet.html). \nWe can easily fit a ridge regression model with the RAPM design matrix.\nIn order to tune the penalty $\\lambda$, we will use the built-in cross-validation code with the `cv.glmnet()` function.\n\nFirst, grab only the player columns (i.e. the indicator variables in the original data), then convert to a matrix using `as.matrix()`, and store this as a new object named `player_matrix`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# INSERT CODE HERE\n```\n:::\n\n\n\n\nNext, fit a ridge regression model with `glmnet`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# library(glmnet)\n# help(cv.glmnet)\n\n# ridge with 10 fold cv, no intercept and no standardization\n# fit_ridge_cv <- cv.glmnet(x = INSERT CODE HERE, \n#                           y = INSERT CODE HERE, \n#                           alpha = INSERT CODE HERE, \n#                           intercept = FALSE, \n#                           standardize = FALSE)\n```\n:::\n\n\n\n\nWe can now view the penalty selection for this model:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot(fit_ridge_cv)\n```\n:::\n\n\n\n\nWe can also easily plot the path of the ridge regression shrinkage, to see how the coefficients are pulled towards 0 as the penalty increases.\nThe following code chunk shows this full path:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot(fit_ridge_cv$glmnet.fit, xvar = \"lambda\")\n```\n:::\n\n\n\n\nUsing the `broom` package again, we can again make a tidy table of the coefficients for each player:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tidy_ridge_coef <- tidy(fit_ridge_cv$glmnet.fit)\n# tidy_ridge_coef\n```\n:::\n\n\n\n\nIf you look closely, this returns 100 rows for each player in the data - because it is returning the coefficient for each player at each value of the `lambda` penalty. \nWe can filter to the values for the optimal choice of `lambda` based on the cross-validation results, and then join our player names as before:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# rapm_ridge_coef <- tidy_ridge_coef |>\n#   filter(lambda == fit_ridge_cv$lambda.min) |> # filter to the min lambda CV\n#   mutate(term = as.numeric(term)) |>  # convert term to numeric\n#   left_join(INSERT CODE HERE) # join to obtain player names\n```\n:::\n\n\n\n\nNow, display the top 10 players based on coefficient estimates. Does this list pass the eye test? (Who won the NBA MVP in 2023?)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# INSERT CODE HERE\n```\n:::\n\n\n\n\nAnd finally, let's view the RAPM coefficient distribution (for comparison against the APM coefficients). Display a histogram of `estimate` from the model\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# INSERT CODE HERE\n```\n:::\n\n\n\n\n### Lasso RAPM\n\nWe've just seen the benefits of using ridge regression to estimate player effects in the presence of collinearity.\nWhat happens if we use the lasso penalty instead of the ridge penalty?\n\nRepeat what we just did, but for a lasso regression model instead of ridge.\n(HINT: what do you need to set `alpha = ` to?)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# INSERT CODE HERE\n```\n:::\n\n\n\n\nWho are the top 10 players based on lasso regression? Is this similar (player names and order) to what we got using ridge?\nComment on how the lasso rankings and estimates compare to the ridge regression estimates.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}